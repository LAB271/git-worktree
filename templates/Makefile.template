#!/usr/bin/make -f

SHELL := /bin/bash

PACKAGE=PACKAGE_NAME_HERE
VIRTUALENV = ./.$(PACKAGE)
PYTHON = $(VIRTUALENV)/bin/python
.PHONY: check freeze clean env test outdated version help all

default: help

TARGETS = check env test
all: $(TARGETS)

check: ## Validate primary development dependencies
	@python --version > /dev/null
	@python -m pip > /dev/null
	@echo "All required tools available"

freeze:  ## Freezes pip requirements
	@echo "# Generated on `date`" >| requirements.txt
	@$(PYTHON) -m pip freeze | grep -v "$(PACKAGE)" >> requirements.txt
	@echo "requirements.txt regenerated"

clean: ## Clean all build files and virtualenv
	-@echo y | pip uninstall $(PACKAGE)
	@rm -rdf $(PACKAGE).egg*
	@find . -name *.pyc -delete
	@rm -rdf build dist
	@rm -rdf $(VIRTUALENV)
	@rm -frd .pytest_cache .ruff_cache .coverage
	@rm -rfd __pycache__

env: $(VIRTUALENV)/bin/python ## create the virtualenv
	@$(PYTHON) -m pip install --upgrade pip
	@$(PYTHON) -m pip install -r requirements.txt
	@$(PYTHON) -m pip install -e .

test: ## Run unit tests and coverage
	@coverage run -m pytest
	@coverage report -m --fail-under=85

$(VIRTUALENV)/bin/python: # create the local virtualenv
	virtualenv $(VIRTUALENV)
	echo "To activate 'source $(VIRTUALENV)/bin/activate'"

outdated: ## list all outdated packages
	@$(PYTHON) -m pip list --outdated	
	
version: ## show versions
	@$(PYTHON) --version
	
help: ## Shows help screen
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' Makefile | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-16s\033[0m %s\n", $$1, $$2}'
	@echo ""